const express = require("express");

const app = express();


// This will only handle GET call to /user
// app.get("/user", (req, res) => {
//     console.log(req.query)
//     res.send({
//         firstName: "Santha Kumar",
//         lastName: "Chigurupati"
//     })
// })


// This for dynamic router with changing ID Number
// app.get("/user/:userId", (req, res) => {
//     console.log(req.params)
//     res.send({
//         firstName: "Santha Kumar",
//         lastName: "Chigurupati"
//     })
// })

// ? in the route path makes the preceding character optional
// app.get("/user/ab?cd", (req, res) => {
//     console.log(req.params)
//     res.send({
//         firstName: "Santha Kumar",
//         lastName: "Chigurupati"
//     })
// })

// + in the route path means the preceding character must occur one or more times. matches atleast 1 b or more
// app.get("/user/ab+cd", (req, res) => {
//     console.log(req.params)
//     res.send({
//         firstName: "Santha Kumar",
//         lastName: "Chigurupati"
//     })
// })

// * (wildcard) matches zero or more characters in the path at the specified position. matches any string, number in between ab and cd
// app.get("/user/ab*cd", (req, res) => {
//     console.log(req.params)
//     res.send({
//         firstName: "Santha Kumar",
//         lastName: "Chigurupati"
//     })
// })

// this matches, it works if b exists or not
// app.get("/user/a(bb)?cd", (req, res) => {
//     console.log(req.params)
//     res.send({
//         firstName: "Santha Kumar",
//         lastName: "Chigurupati"
//     })
// })

// this matches, it won't works if at least bb exists
// app.get("/user/a(bb)+cd", (req, res) => {
//     console.log(req.params)
//     res.send({
//         firstName: "Santha Kumar",
//         lastName: "Chigurupati"
//     })
// })

// this matches, regular expression, we can have anything in that route
app.get("/*/", (req, res) => {
    console.log(req.params)
    res.send({
        firstName: "Santha Kumar",
        lastName: "Chigurupati"
    })
})






// app.post("/user", (req, res) => {
//     res.send("Saving data to DataBase");
// })

// app.delete("/user", (req, res) => {
//     res.send("User Deleted Successfully");
// })


// This route will match all the HTTP method API calls to /test
// app.use("/test", (req, res) => {
//     res.send("Hello from the Test page");
// });

// app.use("/login", (req, res) => {
//     res.send("Hello from the Login page");
// });

// app.use("/dashboard", (req, res) => {
//     res.send("Hello from the Dashboard page");
// });

// app.use("/", (req, res) => {
//     res.send("Hello from the Home page: csk");
// });

app.listen(7777, () => {
    console.log("Server is successfully listening on port 7777...")
});


















const express = require("express");

const app = express();

app.use("/user", (req, res, next)=> {
    //res.send("Handling Route")
    next()
})

app.get(
    "/user", 
    (req, res, next)=> {
        //Route Handler
        console.log("Handling the route user 1");
        next()
        res.send("Route Handler 1");
    },
    (req, res, next) => {
        //Route Handler
        console.log("Handling the route user 2")
        next();
        res.send("Route Handler 2");
    },
    (req, res, next) => {
        //Route Handler
        console.log("Handling the route user 3")
        next();
        //res.send("Route Handler 3");
    }

)

app.listen(7777, () => {
    console.log("Server is successfully listening on port 7777...");
});





















const express = require("express");

const app = express();

const { adminAuth, userAuth } = require("./middleware/auth")

// Handle Auth Middleware for all GET, POST, PATCH, DELETE ... requests
app.use("/admin", adminAuth );
app.use("/user", userAuth);
app.use("/", (err, req, res, next) => {
    if(err) {
        res.status(500).send("Something Went Wrong")
    }
})

app.get("/user", (req, res) => {
    try {
        throw new Error("aaaaaaa");
        res.send("User data send")
    }
    catch (err) {
        res.status(500).send("Something Went Wrong")
    }
})

app.get("/admin/getAllData", (req, res)=> {
    res.send("All Data Sent");
})

app.get("/admin/deleteUser", (req, res)=> {
    res.send("Delete User");
})

app.listen(7777, () => {
    console.log("Server is successfully listening on port 7777...");
});














const express = require("express");
const connectDB = require("./config/database")
const app = express();
const User = require("./models/user")


// Creating a new instance of the User Model
app.post("/signup", async (req, res) => {
    const user = new User({
        firstName: "Deepika",
        lastName: "Padukone",
        emailId: "deepikapadukone@gmail.com",
        password: "deepikapadukone@123",
    })

    await user.save();
    //console.log("user data is:", user)
    res.send("User Added Successfully");

})

// Connecting to DataBase & Listening the Server
connectDB()
    .then(() => {
        console.log("Database connection success");

        app.listen(7777, () => {
            console.log("Server is successfully listening on port 7777...");
        });

    }).catch((err) => {
        console.log("Database connection failed")
    })



















const express = require("express");
const connectDB = require("./config/database")
const app = express();
const User = require("./models/user");

app.use(express.json());


// Creating a new instance of the User Model - POST
app.post("/signup", async (req, res) => {

    // Adding user statically
    // const user = new User({
    //     firstName: "Rahul2",
    //     lastName: "Dravid",
    //     emailId: "rahuldravid@gmail.com",
    //     password: "rahuldravid@123"
    // })

    // try {
    //     await user.save();
    //     res.send("Usere Added Successfully")
    // } catch (err) {
    //     res.status(400).send("Error saving the user:" + err.message);
    // }



    // Adding user Dynamically
    //console.log(req.body);
    const user = new User(req.body)

    try {
        await user.save();
        res.send("User Added Successfully")
    } catch (err) {
        res.status(400).send("Error saving the user:" + err.message);
    }



});


// getting data from DB - GET
app.get("/user", async (req, res) => {
    const userEmail = req.body.emailId;

    try {
        const users = await User.find({emailId: userEmail});
        //const users = await User.findOne({emailId: userEmail});
        if(users.length === 0) {
            res.status(404).send("Users not found")
        } else {
            res.send(users);
        }
    } catch (err) {
        res.status(400).send("User Not Found")
    }
    
})

// getting all users data - GET
app.get("/feed", async (req, res) => {
    try{
        const usersData = await User.find({});
        res.send(usersData)
    } catch(err) {
        res.status(404).send("something went wrong")
    }

    res.send("All users data");
})

// deleting user data - DELETE
app.delete("/user", async (req, res) => {
    try {
        const userId = req.body.userId;
        const user = await User.findByIdAndDelete(userId);
        res.send("user deleted successfully");
    } catch (err) {
        res.status(404).send("user not found")
    }
})

// update user data - PATCH or UPDATE
app.patch("/user", async (req, res) => {
    console.log(req.body)
    const userId = req.body.userId;
    const data = req.body;
    try {
        await User.findByIdAndUpdate({ _id: userId }, data)
        res.send("user updated successfully")
    } catch (err) {
        res.status(404).send("User not found")
    }
})


// updating data in DB - PATCH
//app.patch("/user", (req, res) => {
    // const userId = req.body.userId;
    // const data = req.body;
    // try {
    //     const user = await User.findByIdAndUpdate({ _id: userId }, data, {
    //         returnDocument: "after",
    //         runValidators: true,
    //     });
    //     console.log(user);
    //     res.send("User updated successfully");
    // } catch (err) { 
    //     res.status(400).send("something went wrong")
    // }

    //res.send("Updated successfully")
//})

//Connecting to DataBase & Listening the Server
connectDB()
    .then(() => {
        console.log("Database connection success");

        app.listen(7777, () => {
            console.log("Server is successfully listening on port 7777...");
        });

    }).catch((err) => {
        console.log("Database connection failed")
    })




















